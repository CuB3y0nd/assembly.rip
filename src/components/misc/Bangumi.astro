---
import type { CollectionItem } from "../../types/config";

export interface Props {
	title: string;
	prefix: string;
	data: Record<"watching" | "wish" | "collect", CollectionItem[]>;
	allDataFetched: boolean;
	cats: { key: "watching" | "wish" | "collect"; name: string; type: number }[];
	withMarginTop?: boolean;
}

const {
	title,
	prefix,
	data,
	allDataFetched,
	cats,
	withMarginTop = false,
} = Astro.props;
---

<div class={`flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32 ${withMarginTop ? "top-4" : ""}`}>
  <div class="card-base z-10 px-4 sm:px-6 py-6 relative w-full">
    <h1 class="text-2xl font-bold mb-6 dark:text-white">{title}</h1>

    {allDataFetched ? (
      <>
        <!-- Tabs -->
        <div
          class="flex border-b border-gray-200 dark:border-gray-700 mb-6"
          role="tablist"
          id={`${prefix}-tabs`}
          data-prefix={prefix}
        >
          {cats.map(({ key, name }, index) => {
            const isFirst = index === 0;
            return (
              <button
                id={`${prefix}-tab-${key}`}
                class={`tab-button px-4 py-2 font-medium text-sm transition-colors duration-200 ${
                  isFirst
                    ? 'border-b-2 border-primary text-primary dark:text-[var(--primary)]'
                    : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
                }`}
                data-target={`${prefix}-${key}`}
                role="tab"
                aria-controls={`${prefix}-${key}`}
                aria-selected={isFirst}
              >
                {name}（{data[key].length}）
              </button>
            );
          })}
        </div>

        <!-- Content -->
        <div class="mt-4 bangumi-content-container" id={`${prefix}-content`}>
          {cats.map(({ key }, index) => {
            const isFirst = index === 0;
            return (
              <section
                id={`${prefix}-${key}`}
                role="tabpanel"
                aria-labelledby={`${prefix}-tab-${key}`}
                class={`bangumi-section ${!isFirst ? 'hidden' : ''}`}
                aria-hidden={!isFirst}
              >
                {data[key].length ? (
                  <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                    {data[key].map((item) => {
                      const s = item.subject;
                      const total = s?.eps || 0;
                      const watched = item.ep_status || 0;
                      const percent =
                        total > 0 ? Math.min(100, Math.max(0, Math.round((watched / total) * 100))) : 0;
                      const imageUrl = s?.images?.large || s?.images?.common || '/default-image.png';

                      return (
                        <div class="card-base overflow-hidden transition-transform duration-300 hover:shadow-lg dark:bg-[var(--card-bg)]">
                          <div class="aspect-[3/4] overflow-hidden">
                            <img
                              class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                              src={imageUrl}
                              alt={s?.name || s?.name_cn || '未知作品'}
                              loading="lazy"
                              decoding="async"
                              data-src-fallback="/default-image.png"
                            />
                          </div>
                          <div class="p-3">
                            <h2 class="font-medium text-base line-clamp-2 mb-2 min-h-[2.5rem] dark:text-white break-words">
                              {s?.name || s?.name_cn || '未知作品'}
                            </h2>
                            <div class="text-xs">
                              <div class="flex justify-between mb-1">
                                <span class="text-gray-600 dark:text-gray-300 truncate">
                                  {watched} / {total}
                                </span>
                                <span class="text-gray-600 dark:text-gray-300">{percent}%</span>
                              </div>
                              <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5">
                                <div
                                  class="h-1.5 rounded-full transition-all duration-300"
                                  style={`width: ${percent}%; background-color: var(--primary)`}
                                ></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <div class="text-center py-12 text-gray-500 dark:text-gray-400">暂无数据</div>
                )}
              </section>
            );
          })}
        </div>
      </>
    ) : (
      <div class="text-center py-12 text-red-500 dark:text-red-400">加载数据失败，请稍后重试。</div>
    )}
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize all tablist modules generically
    document.querySelectorAll('[role="tablist"]').forEach(tablist => {
      const prefix = tablist.dataset.prefix || tablist.id.split('-')[0];
      const contentContainer = document.getElementById(`${prefix}-content`);
      if (!contentContainer) return;

      const tabs = tablist.querySelectorAll('.tab-button');
      const sections = contentContainer.querySelectorAll('.bangumi-section');

      function switchTab(selectedTab) {
        const targetKey = selectedTab.dataset.target;
        tabs.forEach(tab => {
          const isSelected = tab === selectedTab;
          tab.classList.toggle('border-b-2', isSelected);
          tab.classList.toggle('border-primary', isSelected);
          tab.classList.toggle('text-primary', isSelected);
          tab.classList.toggle('dark:text-[var(--primary)]', isSelected);

          if (isSelected) {
            tab.classList.remove('text-gray-500', 'hover:text-gray-700', 'dark:text-gray-400', 'dark:hover:text-gray-300');
          } else {
            tab.classList.add('text-gray-500', 'hover:text-gray-700');
            tab.classList.remove('text-primary', 'dark:text-[var(--primary)]');
            if (document.documentElement.classList.contains('dark')) {
              tab.classList.add('dark:text-gray-400', 'dark:hover:text-gray-300');
            }
          }
          tab.setAttribute('aria-selected', isSelected.toString());
        });

        sections.forEach(section => {
          const isTarget = section.id === targetKey;
          section.classList.toggle('hidden', !isTarget);
          section.setAttribute('aria-hidden', (!isTarget).toString());
        });
      }

      tabs.forEach(tab => tab.addEventListener('click', () => switchTab(tab)));
    });

    // Image error handling - improved
    function handleImageError(img) {
      const fallbackSrc = img.dataset.srcFallback || '/default-image.png';
      const handleError = function() {
        try {
          img.removeEventListener('error', handleError);
          if (img.src !== fallbackSrc) {
            img.src = fallbackSrc;
            img.alt = '图片加载失败';
          }
        } catch (e) {
          console.error('图片加载失败处理出错:', e);
          img.src = fallbackSrc;
          img.alt = '图片加载失败';
        }
      };

      img.addEventListener('error', handleError);
    }

    document.querySelectorAll('img[data-src-fallback]').forEach(img => handleImageError(img));

    // Lazy load support via IntersectionObserver for imgs with data-src
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute('data-src');
            }
            observer.unobserve(img);
          }
        });
      });

      document.querySelectorAll('img[data-src]').forEach(img => {
        imageObserver.observe(img);
      });
    }
  });
</script>

<style is:global>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Responsive tweaks for small screens */
  @media (max-width: 640px) {
    .bangumi-section .grid {
      grid-template-columns: repeat(2, minmax(0, 1fr));
      gap: 0.75rem;
    }

    .bangumi-section .card-base {
      max-width: 100%;
    }

    .bangumi-section .p-3 {
      padding: 0.5rem;
    }

    .bangumi-section h2 {
      font-size: 0.85rem;
      line-height: 1rem;
      min-height: 2rem;
    }

    .bangumi-section .text-xs {
      font-size: 0.85rem;
    }
  }

  @media (max-width: 400px) {
    .bangumi-section .grid {
      gap: 0.5rem;
    }

    .bangumi-section h2 {
      font-size: 0.95rem;
      line-height: 0.875rem;
      min-height: 1.75rem;
    }
  }
</style>

